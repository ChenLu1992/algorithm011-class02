189. 旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

暴力解法：
时间复杂度O(n)
空间复杂度O(1)
void rotate(int* nums, int numsSize, int k){
    int iTmpk = k % numsSize;

    if(0 == iTmpk){
        return;
    }

    for(int i =1; i<=iTmpk; ++i)
    {
        int x = nums[numsSize -1];
        for(int j=0;j<numsSize;++j){
            int tmp = nums[j];
            nums[j] = x;
            x = tmp;
        }
        
    }

    return;

}

使用数组空间；
时间复杂度O(n)
空间复杂度O(n)
void rotate(int* nums, int numsSize, int k){
    int iTmpk = k % numsSize;

    if(0 == iTmpk){
        return;
    }

    int* p = malloc(sizeof(int) * numsSize);

    for(int i =0; i<numsSize; ++i)
    {
        p[(i+iTmpk)%numsSize] = nums[i];
        
    }

    memcpy(nums,p,sizeof(int)*numsSize);

    free(p);

    return;

}

旋转数组：
void reverse(int *nums, int start, int end)
{
    int tmp;
    while(start < end){
        tmp = nums[start];
        nums[start++] = nums[end];
        nums[end--] = tmp; 
    }

    return;
}

void rotate(int* nums, int numsSize, int k){
    int iTmpk = k % numsSize;

    if(0 == iTmpk){
        return;
    }

    reverse(nums, 0, numsSize-1);
    reverse(nums, 0, iTmpk-1);
    reverse(nums, iTmpk, numsSize-1);

    return;

}

