typedef struct {
    int *pData;
    int size;
    int MaxSize;
    int head;
    int tail;
} MyCircularDeque;

/** Initialize your data structure here. Set the size of the deque to be k. */

MyCircularDeque* myCircularDequeCreate(int k) {
    MyCircularDeque *p = (MyCircularDeque *)malloc(sizeof(MyCircularDeque));
    p->pData = (int *)malloc(sizeof(int) * k);
    p->size = 0;
    p->MaxSize = k;
    p->head = 0;
    p->tail = k-1;
    return p;
}

/** Adds an item at the front of Deque. Return true if the operation is successful. */
bool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {
    if(obj->MaxSize == obj->size){
        return 0;
    }

    obj->size++;
    obj->pData[obj->head] = value;
    obj->head = (obj->head + obj->MaxSize + 1) % obj->MaxSize;
    
    //printf("Cr head %d\r\n",obj->head);

    return 1;
}

/** Adds an item at the rear of Deque. Return true if the operation is successful. */
bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {
    if(obj->MaxSize == obj->size){
        return 0;
    }

    obj->size++;
    obj->pData[obj->tail] = value;
    obj->tail = (obj->tail + obj->MaxSize - 1) % obj->MaxSize;

    

    //printf("Cr tail %d\r\n",obj->tail);
    return 1;
}

/** Deletes an item from the front of Deque. Return true if the operation is successful. */
bool myCircularDequeDeleteFront(MyCircularDeque* obj) {
    if(obj->size == 0){
        return 0;
    }

    obj->size--;
    obj->head = (obj->head + obj->MaxSize - 1) % obj->MaxSize;

    //printf("de head %d\r\n",obj->head);
    return 1;
}

/** Deletes an item from the rear of Deque. Return true if the operation is successful. */
bool myCircularDequeDeleteLast(MyCircularDeque* obj) {
    if(obj->size == 0){
        return 0;
    }

    obj->size--;
    obj->tail = (obj->tail + 1) % obj->MaxSize;

    //printf("de tail %d\r\n",obj->tail);
    return 1;
}

/** Get the front item from the deque. */
int myCircularDequeGetFront(MyCircularDeque* obj) {
    
    if(obj->size == 0){
        return -1;
    }
    
    int indix = (obj->head + obj->MaxSize - 1) % obj->MaxSize;
    //printf("get head %d\r\n",indix);
    return obj->pData[indix];
}

/** Get the last item from the deque. */
int myCircularDequeGetRear(MyCircularDeque* obj) {
    if(obj->size == 0){
        return -1;
    }
    //printf("get tail %d\r\n",obj->tail);
    int indix = (obj->tail + 1) % obj->MaxSize;

    return obj->pData[indix];
}

/** Checks whether the circular deque is empty or not. */
bool myCircularDequeIsEmpty(MyCircularDeque* obj) {
    return obj->size == 0;
}

/** Checks whether the circular deque is full or not. */
bool myCircularDequeIsFull(MyCircularDeque* obj) {
    if(obj->MaxSize == obj->size){
        return 1;
    }

    return 0;
}

void myCircularDequeFree(MyCircularDeque* obj) {
    free(obj->pData);
    free(obj);
    return;
}

/**
 * Your MyCircularDeque struct will be instantiated and called as such:
 * MyCircularDeque* obj = myCircularDequeCreate(k);
 * bool param_1 = myCircularDequeInsertFront(obj, value);
 
 * bool param_2 = myCircularDequeInsertLast(obj, value);
 
 * bool param_3 = myCircularDequeDeleteFront(obj);
 
 * bool param_4 = myCircularDequeDeleteLast(obj);
 
 * int param_5 = myCircularDequeGetFront(obj);
 
 * int param_6 = myCircularDequeGetRear(obj);
 
 * bool param_7 = myCircularDequeIsEmpty(obj);
 
 * bool param_8 = myCircularDequeIsFull(obj);
 
 * myCircularDequeFree(obj);
*/