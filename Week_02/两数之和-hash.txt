/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

typedef struct tag_HashNode{
    int key;
    int value;
    struct tag_HashNode *next;
}HashNode;

typedef struct tag_HashHead{
    HashNode **ppstNodeList;
    int size;
}HashHead;

int hash_init(HashHead *ptable, int size){
    if(0>size){
        return -1;
    }

    ptable->ppstNodeList = (HashNode **)malloc(sizeof(HashNode*) * size);
    memset(ptable->ppstNodeList, 0, sizeof(HashNode *) * size);
    ptable->size = size;

    return 0;
}

void hash_free(HashHead *ptable){
    if(ptable->ppstNodeList){
        for(int i=0; i<ptable->size; i++){
            HashNode *pList = ptable->ppstNodeList[i];
            while(pList){
                HashNode *tmp = pList;
                pList = tmp->next;
                free(tmp);
            }
        }

        free(ptable->ppstNodeList);
        ptable->size = 0;
    }

    return;
}

int hash_addr(HashHead *ptable, int key){
    return abs(key) % (ptable->size);
}

void hash_insert(HashHead *ptable, int key, int value){
    HashNode *ptmp = (HashNode *)malloc(sizeof(HashNode));
    ptmp->key = key;
    ptmp->value = value;
    ptmp->next = NULL;

    int addr = hash_addr(ptable, key);
    ptmp->next = ptable->ppstNodeList[addr];
    ptable->ppstNodeList[addr] = ptmp;

    return;
}

HashNode *hash_find(HashHead *ptable, int key){
    int addr = hash_addr(ptable, key);
    HashNode *List = ptable->ppstNodeList[addr];
    while(NULL != List){
        if(List->key == key){
            return List;
        }
        List = List->next;
    }

    return NULL;
}


int* twoSum(int* nums, int numsSize, int target, int* returnSize){

    *returnSize = 0;
    if(!nums || numsSize<2){
        return NULL;
    }

    int* res = (int *)malloc(sizeof(int) * 2);

    HashHead stHashTable;
    hash_init(&stHashTable, 100);

    for(int i=0; i<numsSize; i++){
        int value = target-nums[i];
        HashNode *pData = hash_find(&stHashTable, value);
        if(pData && (pData->value != i)){
            res[0] = i;
            res[1] = pData->value;
            *returnSize = 2;
            break;
        }
        hash_insert(&stHashTable, nums[i], i);
    }

    hash_free(&stHashTable);

    return res;
}