/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
输入: ["eat", "tea", "tan", "ate", "nat", "bat"],
输出:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]

 */
struct WordList {
	char *word;
	struct WordList *next;
};

struct HashSet {
	char *key;
	struct WordList *ln;
	int cnt;
	UT_hash_handle hh;
};

struct HashSet *hashHead;

int cmpChar(const void* _a , const void* _b) //参数格式固定
{
    char* a = (char*)_a;    //强制类型转换
    char* b = (char*)_b;
    return *a - *b;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
char *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){

	hashHead = NULL;
	struct HashSet *tempH = NULL;
	struct HashSet *s = NULL;
	struct HashSet *tmp = NULL;
	struct WordList *tNext = NULL;
	char *tempW;
	int i;
	int row = 0;
	for (i = 0; i < strsSize; i++) {
		tempW = (char *)malloc(strlen(strs[i]) + 1);
		memcpy(tempW, strs[i], strlen(strs[i]) + 1);
		if (strs[i] != 0) {
			qsort(tempW, strlen(strs[i]), sizeof(char), cmpChar);
		} else {
			tempW[0] = 0;
		}

		HASH_FIND_STR(hashHead, tempW, tempH);
		if (tempH != NULL) {
			tNext = tempH->ln->next;
			tempH->ln->next = (struct WordList *)malloc(sizeof(struct WordList));
			tempH->ln->next->word = (char *)malloc(strlen(strs[i]) + 1);
			memcpy(tempH->ln->next->word, strs[i], strlen(strs[i]) + 1);
			tempH->ln->next->next = tNext;
			tempH->cnt = 1;
		} else {
			tempH = (struct HashSet *)malloc(sizeof(struct HashSet));
			tempH->key = tempW;
			tempH->ln = (struct WordList *)malloc(sizeof(struct WordList));
			tempH->ln->word = (char *)malloc(strlen(strs[i]) + 1);
			memcpy(tempH->ln->word, strs[i], strlen(strs[i]) + 1);
			tempH->ln->next = NULL;
			tempH->cnt++;
			HASH_ADD_KEYPTR(hh, hashHead, tempH->key, strlen(tempH->key), tempH);
			row++;
		}
	}
	char ***ans = (char ***)malloc(strsSize * sizeof(char **));
	for (i = 0; i < strsSize; i++) {
		ans[i] = (char **)malloc(strsSize * sizeof(char *));
	}

	int *col = (int *)malloc(strsSize * sizeof(int));
	memset(col, 0, strsSize * sizeof(int));

	int cnt = 0;
	HASH_ITER(hh, hashHead, s, tmp) {
		tNext = s->ln;
		while (tNext != NULL) {
			ans[cnt][col[cnt]] = tNext->word;
			col[cnt]++;
			tNext = tNext->next;
		}
		cnt++;
	}

	* returnSize = cnt;
	* returnColumnSizes = col;
	return ans;
}