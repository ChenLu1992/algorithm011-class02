/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */


void dfs(int* nums, int numsSize, int* returnSize, int** returnColumnSizes, int index, int *tmpres, int *used, int **res){
    if(index==numsSize){
        res[(*returnSize)] = (int *)malloc(sizeof(int) * numsSize);
        memcpy(res[(*returnSize)], tmpres, sizeof(int) * numsSize);
        (*returnColumnSizes)[(*returnSize)] = numsSize;
        (*returnSize)++;
    }
    else
    {
        for(int i=0;i<numsSize;i++){
            if(!used[i]){
                if(i>0 && nums[i]==nums[i-1] && 0 != used[i-1]){
                    continue;
                }
                used[i]=1;
                tmpres[index] = nums[i];
                dfs(nums,numsSize,returnSize,returnColumnSizes,index+1,tmpres,used,res);
                used[i]=0;
            }
        }
    }
    return;
}

int cmp(void *a, void *b){
    return *(int *)a - *(int *)b;
}

int** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){

    qsort(nums,numsSize,sizeof(int),cmp);

    int **res = (int **)malloc(sizeof(int *) * 10000);
    *returnColumnSizes = (int *)malloc(sizeof(int) * 10000);
    int tmpres[numsSize];
    int used[numsSize];

    *returnSize = 0;
    memset(used,0,numsSize*sizeof(int));

    dfs(nums, numsSize,returnSize,returnColumnSizes,0,tmpres,used,res);

    return res;
}