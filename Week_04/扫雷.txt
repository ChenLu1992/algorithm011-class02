/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int CountM(int x, int xsize, int y, int ysize, char **res){
    int num=0;

    if(x-1>=0){
        if(res[x-1][y]=='M')num++;
        if(y+1<=ysize){
            if(res[x-1][y+1]=='M')num++;
        }

        if(y-1>=0){
            if(res[x-1][y-1]=='M')num++;
        }
    }

    if(x+1<=xsize){
        if(res[x+1][y]=='M')num++;

        if(y-1>=0){
            if(res[x+1][y-1]=='M')num++;
        }

        if(y+1<=ysize){
            if(res[x+1][y+1]=='M')num++;
        }
    }

    if(y-1>=0){ 
        if(res[x][y-1]=='M')num++;
    }
    if(y+1<=ysize){
        if(res[x][y+1]=='M')num++;
    }
    return num;
}

void dfs(int x, int xsize, int y, int ysize, char **res){
    if(x<0 || x>xsize || y<0 || y>ysize){
        return;
    }

    if(res[x][y]=='M'){
        return;
    }

    //判断（x,y）附近地雷个数
    int num = CountM(x,xsize,y,ysize,res);
    if(num>0){
        res[x][y]='0'+num;
    }
    else if(res[x][y]=='E'){
        res[x][y]='B';
        dfs(x-1,xsize,y,ysize,res);//上
        dfs(x+1,xsize,y,ysize,res);//下
        dfs(x,xsize,y-1,ysize,res);//左
        dfs(x,xsize,y+1,ysize,res);//右
        dfs(x-1,xsize,y-1,ysize,res);//左上
        dfs(x+1,xsize,y-1,ysize,res);//左下
        dfs(x-1,xsize,y+1,ysize,res);//右上
        dfs(x+1,xsize,y+1,ysize,res);//右下
    }

    return;
}


char** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes){
    if(!board){
        return NULL;
    }

    char **res = (char **)malloc(sizeof(char *) * boardSize);
    *returnSize = boardSize;
    *returnColumnSizes = (int *)malloc(sizeof(int) * boardSize);

    for(int i=0;i<boardSize;i++){
        res[i] = malloc(sizeof(char) * boardColSize[i]);
        (*returnColumnSizes)[i] = boardColSize[i];
        memcpy(res[i], board[i], sizeof(char) * boardColSize[i]);
    }

    int x=click[0];
    int y=click[1];

    if(res[x][y]=='M'){
        res[x][y]='X';
    }
    else{
        dfs(x,boardSize-1,y,boardColSize[0]-1,res);
    }

    return res;
}